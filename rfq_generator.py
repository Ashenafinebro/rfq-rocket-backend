import asyncio
from typing import Dict, Any
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class RFQGenerator:
    def __init__(self):
        pass
    
    async def generate_rfq(self, redacted_content: Dict[str, Any], company_info: Dict[str, str], options: Dict[str, Any] = {}) -> str:
        """Generate clean vendor-facing RFQ document"""
        try:
            rfq_content = self._build_rfq_content(redacted_content, company_info, options)
            logger.info("RFQ document generated successfully")
            return rfq_content
            
        except Exception as e:
            logger.error(f"RFQ generation failed: {str(e)}")
            raise Exception(f"RFQ generation failed: {str(e)}")
    
    def _build_rfq_content(self, content: Dict[str, Any], company_info: Dict[str, str], options: Dict[str, Any]) -> str:
        """Build the RFQ document content"""
        
        current_date = datetime.now().strftime("%B %d, %Y")
        
        rfq_template = f"""
REQUEST FOR QUOTE
{company_info.get('name', 'Orbena Federal Services')}

Date: {current_date}

PROJECT OVERVIEW:
{content.get('project_overview', 'Not specified')}

SCOPE OF WORK:
{content.get('scope_of_work', 'Not specified')}

DELIVERABLES:
{content.get('deliverables', 'Not specified')}

TIMELINE:
{content.get('timeline', 'Not specified')}

LOCATION:
{content.get('location', 'Not specified')}

TECHNICAL REQUIREMENTS:
{content.get('technical_requirements', 'Not specified')}

QUALIFICATIONS:
{content.get('qualifications', 'Not specified')}

SUBMISSION REQUIREMENTS:
{content.get('submission_requirements', 'Not specified')}

EVALUATION CRITERIA:
{content.get('evaluation_criteria', 'Not specified')}

---
Generated by RFQRocket
Contact: {company_info.get('contact', 'info@orbena.com')}
"""
        
        return rfq_template.strip()
